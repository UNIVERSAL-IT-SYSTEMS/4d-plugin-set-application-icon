/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.c
 #	source generated by 4D Plugin Wizard
 #	Project : Set Application Icon
 #	author : miyako
 #	2014/03/08
 #
 # --------------------------------------------------------------------------------*/


#include "4DPluginAPI.h"
#include "4DPlugin.h"

void PluginMain(int32_t selector, PA_PluginParameters params)
{
	try
	{
		int32_t pProcNum = selector;
		sLONG_PTR *pResult = (sLONG_PTR *)params->fResult;
		PackagePtr pParams = (PackagePtr)params->fParameters;
		
		CommandDispatcher(pProcNum, pResult, pParams); 
	}
	catch(...)
	{
		
	}
}

void CommandDispatcher (int32_t pProcNum, sLONG_PTR *pResult, PackagePtr pParams)
{
	switch(pProcNum)
	{
			// --- Main
			
		case 1 :
			SET_APPLICATION_ICON(pResult, pParams);
			break;
			
	}
}

// ------------------------------------- Main -------------------------------------

unsigned int findAvailableIconResourceIDs(const void *lpFileName, unsigned int start, unsigned int howMany, std::vector<unsigned short> *resourceIDs)
{
#if VERSIONWIN		
	HMODULE hModule = LoadLibrary((LPCWSTR)lpFileName);
	
	if(hModule){
		
		for(unsigned int i = 0; i < howMany; i ++){
			
			while (FindResource(hModule, MAKEINTRESOURCE(start), RT_ICON))	start++;			
			
			resourceIDs->push_back(start);
			start++;
		}
		
		FreeLibrary(hModule);
		
	}
	
#endif
	return start;
}

#if VERSIONWIN
void updateIconResource(HANDLE hResouce, unsigned int iconResourceID, const void *iconDataPtr, unsigned int iconDataSize)
{
	
	if(hResouce){	
		
		UpdateResource(
					   hResouce,					
					   RT_ICON,
					   MAKEINTRESOURCE(iconResourceID),
					   MAKELANGID(LANG_NEUTRAL, SUBLANG_NEUTRAL),
					   (LPVOID)iconDataPtr, 
					   iconDataSize
					   );
		
	}
	
}
#endif

#if VERSIONWIN	
void updateIconGroupResource(HANDLE hResouce, const void *lpGroupName, const void *iconHeader, unsigned int iconHeaderSize)
{
	
	if(hResouce){	
		
		UpdateResource(
					   hResouce,
					   RT_GROUP_ICON,
					   (LPCWSTR)lpGroupName,
					   MAKELANGID(LANG_NEUTRAL, SUBLANG_NEUTRAL),
					   (LPVOID)iconHeader,
					   iconHeaderSize
					   );
		
	}
	
}
#endif

#if VERSIONWIN
unsigned int setIconHeader(HANDLE hResouce, const void *lpFileName, C_PICTURE *picture, unsigned int *iconResourceID, GroupIconHeader *iconHeader, unsigned int count)
{
	
	CUTF8String png = CUTF8String((const uint8_t *)".png");	
	CUTF8String ico = CUTF8String((const uint8_t *)".ico");	
	
	const void *iconDataPtr;
	unsigned int iconDataSize;
	
	std::vector<unsigned short> resourceIDs;
	
	iconDataPtr		= picture->getBytesPtr(&png);
	iconDataSize	= picture->getBytesLength(&png);
	
	if(iconDataPtr){
		
		unsigned int width, height;
		
		picture->getSize(&width, &height);
		
		if(width > 0xFF)	width	= 0;
		if(height > 0xFF)	height	= 0;
		
		count = findAvailableIconResourceIDs(lpFileName, count, 1, &resourceIDs);
		
		iconHeader->resources[iconHeader->resourceCount].width			= width;
		iconHeader->resources[iconHeader->resourceCount].height			= height;
		iconHeader->resources[iconHeader->resourceCount].color			= 0;
		iconHeader->resources[iconHeader->resourceCount].reserved		= 0;
		iconHeader->resources[iconHeader->resourceCount].colorPlanes	= 0;
		iconHeader->resources[iconHeader->resourceCount].bitsPerPixel	= 0;			
		iconHeader->resources[iconHeader->resourceCount].dataSize		= iconDataSize;
		iconHeader->resources[iconHeader->resourceCount].resourceID		= resourceIDs.at(0);		
		iconHeader->resourceCount++;
		
		updateIconResource(hResouce, resourceIDs.at(0), iconDataPtr, iconDataSize);	
		
	}
	
	iconDataPtr		= picture->getBytesPtr(&ico);
	iconDataSize	= picture->getBytesLength(&ico);
	
	if(iconDataPtr){
		
		const void *iconResourcePtr;
		unsigned int iconResourceSize;
		
		IconFileHeader		*fileHeader;	
		fileHeader = (IconFileHeader *)iconDataPtr;
		
		unsigned int resourceCount = fileHeader->resourceCount;
		unsigned char *p = (unsigned char *)fileHeader;
		
		resourceIDs.resize(0);
		count = findAvailableIconResourceIDs(lpFileName, count, resourceCount, &resourceIDs);
		
		for(unsigned int i = 0;( i < resourceCount && i < MAX_ICON_COUNT); i++){
			
			IconInfoHeader *infoHeader = (IconInfoHeader *)&p[sizeof(IconFileHeader) + (i * sizeof(IconInfoHeader))];
			
			iconResourceSize = infoHeader->dataSize;
			
			iconResourcePtr = (const void *)&p[infoHeader->offsetToImage];
			
			iconHeader->resources[iconHeader->resourceCount].width			= infoHeader->width;
			iconHeader->resources[iconHeader->resourceCount].height			= infoHeader->height;
			iconHeader->resources[iconHeader->resourceCount].color			= infoHeader->color;
			iconHeader->resources[iconHeader->resourceCount].reserved		= infoHeader->reserved;
			iconHeader->resources[iconHeader->resourceCount].colorPlanes	= infoHeader->colorPlanes;
			iconHeader->resources[iconHeader->resourceCount].bitsPerPixel	= infoHeader->bitsPerPixel;			
			iconHeader->resources[iconHeader->resourceCount].dataSize		= infoHeader->dataSize;
			iconHeader->resources[iconHeader->resourceCount].resourceID		= resourceIDs.at(i);		
			iconHeader->resourceCount++;
			
			updateIconResource(hResouce, resourceIDs.at(i), iconResourcePtr, iconResourceSize);				
			
		}
	}
	
	return count;
}
#endif

void SET_APPLICATION_ICON(sLONG_PTR *pResult, PackagePtr pParams)
{
	C_TEXT Param1;
	C_TEXT Param2;
	C_PICTURE Param3;
	C_PICTURE Param4;
	
	Param1.fromParamAtIndex(pParams, 1);
	Param2.fromParamAtIndex(pParams, 2);
	Param3.fromParamAtIndex(pParams, 3);
	Param4.fromParamAtIndex(pParams, 4);
	
#if VERSIONWIN	
	unsigned int iconResourceID = 1;
	unsigned int count = 1;
	
	GroupIconHeader iconHeader;
	
	iconHeader.reserved = 0; 
	iconHeader.resourceType = 1;
	iconHeader.resourceCount = 0;
	
	HANDLE hResouce = BeginUpdateResource((LPCWSTR)Param1.getUTF16StringPtr(), FALSE);
	
	count = setIconHeader(hResouce, Param1.getUTF16StringPtr(), &Param3, &iconResourceID, &iconHeader, count);
	count = setIconHeader(hResouce, Param1.getUTF16StringPtr(), &Param4, &iconResourceID, &iconHeader, count);
	
	updateIconGroupResource(hResouce, Param2.getUTF16StringPtr(), &iconHeader, sizeof(IconFileHeader) + (iconHeader.resourceCount * sizeof(IconGroupHeader)));
	
	EndUpdateResource(hResouce, FALSE);	
#endif
	
}